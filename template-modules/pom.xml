<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.template</groupId>
    <artifactId>modules</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--将当前项目定义为 pom 项目-->
    <packaging>pom</packaging>
    <name>modules</name>
    <description>modules project for Maven</description>

    <!--子模块的 parent 要使用顶层的父模块-->
    <parent>
        <artifactId>parent</artifactId>
        <groupId>com.template</groupId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
        <!--<relativePath/> &lt;!&ndash; lookup parent from repository &ndash;&gt;-->
    </parent>

    <!--properties 可删掉，会继承父模块的-->
    <properties>
        <!--<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>-->
        <!--<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>-->
        <!--<java.version>1.8</java.version>-->
    </properties>

    <!--父项目通过 dependencyManagement 管理依赖 – 无法继承父项目依赖直接使用，子项目需手动引用依赖-->
    <dependencies>
        <!--SpringBoot的 web 依赖配置-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!--注册子项目 后面创建三级子项目后，需在二级子项目中注册-->
    <modules>
        <module>template-job</module>
        <module>template-log</module>
    </modules>

    <!--让多模块化拆分之后还能打成完整的可执行 jar 包-->
    <build>
        <finalName>modules-demo</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <!--可以把依赖的包都打包到生成的 jar 包中-->
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <!--可以生成不含依赖包的不可执行 jar 包-->
                        <configuration>
                            <classifier>exec</classifier>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
